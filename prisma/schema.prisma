// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id            Int           @default(autoincrement()) @id
  title         String
  slug          String
  description   String?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  image         String?
  content       String?
  published     Boolean       @default(false)
  author        User          @relation(fields: [authorId], references: [id])
  authorId      Int
  comments      Comment[]
  categories    Category[]    @relation(references: [id])
  tags          Tag[]         @relation(references: [id])
  disciplines   Discipline[]  @relation(references: [id])
}

model Comment {
  id            Int           @id @default(autoincrement())
  content       String?
  post          Post?         @relation(fields: [postId], references: [id])
  postId        Int?
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  author        User          @relation("CommentsAuthored", fields: [authorId], references: [id])
  authorId      Int
  likedBy       User[]        @relation(references: [id])
  child         Comment?      @relation("CommentTree", fields: [childId], references: [id])
  parent        Comment?      @relation("CommentTree")
  childId       Int?
  @@map(name: "comments")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map(name: "email_verified")
  imageData     Bytes?
  password      String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @updatedAt @map(name: "updated_at")
  posts         Post[]
  class         Class?        @relation(fields: [classId], references: [id])
  classId       Int?
  publicProfile Boolean       @default(true)
  aboutMe       String?       
  comments      Comment[]     @relation("CommentsAuthored")
  likes         Comment[]     @relation(references: [id])
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @updatedAt @map(name: "updated_at")
  user               User      @relation(fields: [userId], references: [id])
 
  @@unique([providerId, providerAccountId])

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  user         User     @relation(fields: [userId], references: [id])
  
  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Category {
  id            Int           @default(autoincrement()) @id
  name          String
  icon          String?
  disciplines   Discipline[]
  posts         Post[]        @relation(references: [id])
}

model Discipline {
  id            Int           @default(autoincrement()) @id
  name          String
  slug          String
  icon          String?
  description   String?
  category      Category?     @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]         @relation(references: [id])
  posts         Post[]        @relation(references: [id])
  events        Event[]
}

model EventResult {
  id            Int           @default(autoincrement()) @id
  points        Int
  place         Int
  description   String?
  classId       Int
  class         Class         @relation(fields: [classId], references: [id])
  parentId      Int
  event         Event    @relation(fields: [parentId], references: [id])
}

model Tag {
  id            Int           @default(autoincrement()) @id
  name          String
  disciplines   Discipline[]  @relation(references: [id])
  posts         Post[]        @relation(references: [id])
}

model Class {
  id            Int           @default(autoincrement()) @id
  name          String
  objectID      String        @unique
  thirdGrade    Boolean
  organising    Boolean       @default(false)
  users         User[]
  results       EventResult[]
  codes         Code[]
}

model Event {
  id            Int           @default(autoincrement()) @id
  name          String
  startDate     DateTime
  endDate       DateTime
  color         String?
  results       EventResult[]
  parentId      Int?
  discipline    Discipline?    @relation(fields: [parentId], references: [id])
}

model Code {
  id            String          @id
  number        Int             @default(autoincrement())
  classes       Class[]
  qr            Bytes
  active        Boolean
  latitude      Float?
  longitude     Float?
}

enum Role {
  STUDENT
  TEACHER
  USER
  EDITOR
  ADMIN
}